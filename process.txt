Plan-driven processes are processes where all of the process activities are planned in advance and progress is measured against this plan.
●In agile processes, planning is incremental and it is easier to change the process to reflect changing customer requirements.

Waterfall:
Principle: You plan and schedule all of the process activities before starting software development
Result of each phase is one or more approved documents
The following phase should not start until the previous phase has finished
The waterfall model is mostly used for large systems engineering projects.where a system is developed at several sites.

Software Prototyping Development:
May involve leaving out functionality 
●Prototype should focus on areas of the product that are not wellunderstood;
● Error checking and recovery may not be included in the prototype; 
●Focus on functional rather than non-functional requirements such as reliability and security

Incremental delivery :
●Incremental delivery, where system increments are delivered to the customer for comment and experimentation. This supports both change avoidance and change tolerance
Once the development of an increment is started, the requirements are frozen though requirements for later increments can continue to evolve.
●Once an increment is completed and delivered, it is installed in the customer’s normal working environment. They can experiment with the system, and this helps them clarify their requirements for later system increments.
Lower risk of overall project failure
Iterative delivery is problematic when the new system is intended to replace an existing system. Users need all of the functionality of the old system and are usually unwilling to experiment with an incomplete new system.


Incremental development:
It uses incremental development, i.e., develop a system incrementally and expose it to customers for comment, without necessarily delivering it and deploying it in the customer’s environment
The process is not visible. 
●Managers need regular deliverables to measure progress. It is not cost-effective to produce documents that reflect every version of the system.
System structure tends to degrade as new increments are added

Modified Incremental delivery:
One common approach for iterative development: ●Perform requirement specifications and the architecture design in a standard waterfall or prototyping approach, i.e., most of the requirements are specified upfront. Then, deliver the software iteratively.
The aim of agile methods is to reduce overheads in the software process (e.g. by limiting documentation) and to be able to respond quickly to changing requirements without excessive rework

Agile method applicability 
●Product development where a software company is developing a small or medium-sized product for sale.
●Virtually all software products and apps are now developed using an agile approach
●Custom system development within an organization, where there is a clear commitment from the customer to become involved in the development process and where there are few external rules and regulations that affect the software

Principle:
Customer involvement
Incremental delivery
The skills of the development team should be recognized and exploited. Team members should be left to develop their own ways of working without prescriptive processes.
Embrace change
Maintain simplicity

Extreme programming
✔ New versions may be built several times per day; ✔ Increments are delivered to customers every 2 weeks
 ✔ All tests must be run for every build and the build is only accepted if tests run successfully

Principles:
Incremental planning
Small releases
Simple design
Test-first development
Refactoring
Pair programming
Pair programming
Collective ownership
Continuous integration
On-site customer
User stories for specifications: The customer chooses the stories for inclusion in the next release based on their priorities and the schedule estimates
Writing tests before code clarifies the requirements to be implemented.

Pair programming:
Pair programming involves programmers working in pairs, developing code together.
This helps develop common ownership of code and spreads knowledge across the team.
● It serves as an informal review process as each line of code is looked at by more than 1 person.
● It encourages refactoring as the whole team can benefit from improving the system code.
● The sharing of knowledge that happens during pair programming is very important as it reduces the overall risks to a project when team members leave.
● Pair programming is not necessarily inefficient and there is some evidence that suggests that a pair working together is more efficient than 2 programmers working separately.


